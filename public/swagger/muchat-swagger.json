{
  "openapi": "3.0.1",
  "info": {
    "title": "SMUCS API",
    "description": "## Andrey Gruzdev \n ### Authorization \n Secret key, issuer and audience can be specified in **appsettings.json** \n The authorization is the same as in the main system. The key must be the same one used in the main system \n ### External API (main system) \n **MainSystemHost** can be specified in **appsettings.json** \n ### Hub usage example ↓↓↓ \n [Example](https://git.infostrategic.com/videodotnet/smart-muchat/-/tree/release-1.1/back/SMUCS/SMUCS/wwwroot) \n ### Global Error Handler \n Global Error Handler is used, errorCodes and StatusCodes are displayed in the descriptions of each method \n If StatusCode is 500, it is a new bug, please tell me, so I can handle it and specify a new errorCode \n ### StatusUpdaterService \n Background service is running, which updates the **status** of users with **Away**, based on their last activity \n Can be specified in **appsettings.json** in field **AwayAfter** in minutes. 5 minutes right now \n Updates both **DB** and SignalR connections \n",
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Login": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Authenticate user through the main system endpoint",
        "description": "### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_AUTH_ERR | 400 | Error occured while trying to log in |",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LogInDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogInDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LogInDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LogInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Creates a chat with the users from the list of contacts",
        "description": "### Name Generation\r\nBy default newely created chat has generated property **Name**, which generates like ``` realName, realName2, ... ```\r\n### SignalR\r\nAfter calling this method, the ``` /chat/ChatCreated ``` should be called, see more info in the ``` ChatHub ``` section\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EMPTY_CHAT_ERR | 400 | Can't create empty chat |\r\n| CHAT_ADD_YOURSELF_ERR   | 400 | Can't create chat with yourself |\r\n| USER_NOT_IN_CONTACTS_ERR | 402 | User is not in your contacts |\r\n| EXT_GLOBAL_USER_NOT_FOUND_ERR | 404 | User not found in main system |\r\n| EXT_CONTACT_GET_ERR | 400 | Error, while getting contacts |",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of contacts",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "201": {
            "description": "Chat created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Chats"
        ],
        "summary": "Deletes the chat",
        "description": "### Authorization\r\nchatUser, who is calling this method, needs to be **isModerator**\r\n### SignalR\r\nAfter calling this method, the ``` /chat/ChatDeleted ``` should be called, see more info in the ``` ChatHub ``` section\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |\r\n| CHATUSER_NOT_MODER_ERR | 402 | Chat user is not moderator |\r\n| CHATUSER_NOT_FOUND_ERR | 404 | Chat user is not found |",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "402": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/AddMessage": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Adds a message to the chat",
        "description": "### Message status\r\nBy default the message is created with status **Sent**, which could change after chatUser has seen the message in method ``` /chat/Seen ```, see more info in the ``` ChatHub ``` section\r\n### SignalR\r\nAfter calling this method, the ``` /chat/Sent ``` should be called, see more info in the ``` ChatHub ``` section\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_ATTACHMENT_UPLOAD_ERR | 400 | Error while uploading a file |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "message",
            "in": "query",
            "description": "Text of the message",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeZoneId",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachment": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ContentType": {
                  "style": "form"
                },
                "ContentDisposition": {
                  "style": "form"
                },
                "Headers": {
                  "style": "form"
                },
                "Length": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message added",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/ViewAttachment": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Views attachment",
        "description": "### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| ATTACHMENT_NOT_FOUND_ERR | 404 | Attachment not found |\r\n| EXT_ATTACHMENT_VIEW_ERR | 400 | Attachment view error |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "query",
            "description": "Id of attachment",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment is displayed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/DownloadAttachment": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Downloads attachment",
        "description": "### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| ATTACHMENT_NOT_FOUND_ERR | 404 | Attachment not found |\r\n| EXT_ATTACHMENT_VIEW_ERR | 400 | Attachment view error |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "query",
            "description": "Id of attachment",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment is downloaded",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/GetAttachments": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Returns all attachments as paginated list",
        "description": "### Usage\r\nUse **pageSize** to regulate the size of returned page and **pageNumber** to get specific page of the paginated list\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "#### Optional\r\n#### Size of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "#### Optional\r\n#### Number of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/ChangeTitle": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Changes the name of chat",
        "description": "### Name Generation\r\nSets **CustomName** to **true**, which stops the name generation\r\n### SignalR\r\nAfter calling this method, the ``` /chat/ChatUpdated ``` should be called, see more info in the ``` ChatHub ``` section\r\n### Authorization\r\nchatUser, who is calling this method, needs to be **isModerator**\r\n### Remarks\r\nChanges the **Name** property of chat\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |\r\n| CHATUSER_NOT_MODER_ERR | 402 | Chat user is not moderator |\r\n| CHATUSER_NOT_FOUND_ERR | 404 | Chat user is not found |",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The new custom name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Name changed",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "402": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/AddUsers": {
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Adds users to chat",
        "description": "### Name Generation\r\nIf the **CustomName** is **false**, will be generated like ``` realName, realName2, ... ``` with new users added\r\n### SignalR\r\nAfter calling this method, the ``` /chat/ChatUsersAdded ``` should be called, see more info in the ``` ChatHub ``` section\r\n### Authorization\r\nchatUser, who is calling this method, needs to be **isModerator**\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |\r\n| USER_NOT_IN_CONTACTS_ERR | 402 | User is not in your contacts |\r\n| USER_ALREADY_IN_CHAT_ERR | 400 | User is already in chat |",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Users from contacts to add",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users were added",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/DeleteUsers": {
      "delete": {
        "tags": [
          "Chats"
        ],
        "summary": "Deletes users from chat",
        "description": "### Name Generation\r\nIf the **CustomName** is **false**, will be generated like ``` realName, realName2, ... ``` with the users removed\r\n### SignalR\r\nAfter calling this method, the ``` /chat/ChatUsersDeleted ``` should be called, see more info in the ``` ChatHub ``` section\r\n### Authorization\r\nchatUser, who is calling this method, needs to be **isModerator**\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |\r\n| USER_NOT_IN_CONTACTS_ERR | 402 | User is not in your contacts |\r\n| USER_NOT_IN_CHAT_ERR | 400 | User is not in chat |",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Users from contacts to delete",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "text/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users were deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/GetAll": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Returns the paginated list of all chats",
        "description": "### Remarks\r\nCan not be null, returned as empty  \r\nOnly shows the last message",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeZoneId",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "#### Optional\r\n#### Size of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "#### Optional\r\n#### Number of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of chats",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatResultDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatResultDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatResultDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/Get": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Get the chat",
        "description": "### Remarks\r\nCan not be null, returned as empty  \r\nShows all messages\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| CHAT_NOT_FOUND_ERR | 404 | Chat not found |",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeZoneId",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "#### Optional\r\n#### Size of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "#### Optional\r\n#### Number of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Chats/Search": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Search through chats or messages",
        "description": "### Remarks\r\nOn target **chats** return contains the chats with the last message only  \r\nWill search automaticaly through users realNames and contactNames**(for current user)** fetched from the main system\r\n### Usage\r\nUse **pageSize** to regulate the size of returned page and **pageNumber** to get specific page of the paginated list\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| CHAT_SEARCH_WRONG_TARGET | 400 | Available targets: messages, chats |\r\n| EXT_GLOBAL_USER_NOT_FOUND_ERR | 404 | User not found in main system |\r\n| EXT_CONTACT_GET_ERR | 400 | Error, while getting contacts |",
        "parameters": [
          {
            "name": "target",
            "in": "query",
            "description": "**messages**, **chats**",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "description": "\"en\", \"ar\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeZoneId",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "#### Optional\r\n#### Size of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "#### Optional\r\n#### Number of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "chatId",
            "in": "query",
            "description": "#### Optional\r\nOnly used when target is **messages**",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "#### Optional\r\n#### Filter for the string query\r\nBy default will be empty string, which results into no filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of chats / messages",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/GetAll": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets all contacts from main system",
        "description": "### Remarks\r\nThe contacts from the external source are binded to users by **contactId** in the DB. Which can be accessed by property **contact**\r\n### External API Calls\r\n**GET** ``` {mainSystemHost}/api/v1/Contact ```\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_CONTACT_GET_ERR | 400 | Error while getting contacts |",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Get": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get the specific contact",
        "description": "### Remarks\r\nThe contacts from the external source are binded to users by **contactId** in the DB. Which can be accessed by property **contact**\r\n### External API Calls\r\n**GET** ``` {mainSystemHost}/api/v1/Contact ```\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_CONTACT_GET_ERR | 400 | Error while getting contacts |",
        "parameters": [
          {
            "name": "contactId",
            "in": "query",
            "description": "contactId of contact",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Creates the contact in the main system",
        "description": "### External API Calls\r\n**POST** ``` {mainSystemHost}/api/v1/Contact ```\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_CONTACT_GET_ERR | 400 | Error while getting contacts |\r\n| EXT_CONTACT_CREATE_ALREADY_EXISTS_ERR | 400 | Contact already exists |\r\n| EXT_CONTACT_CREATE_INVALID_EMAIL_ERR | 400 | Invalid email |\r\n| EXT_CONTACT_CREATE_YOURSELF_ERR | 400 | Can't add yourself |",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "**Mobile**, **Home**, **Office** must contain a number. **Email** must be an email",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes the contact",
        "description": "### External API Calls\r\n**DELETE** ``` {mainSystemHost}/api/v1/Contact/{id} ```\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_CONTACT_NOT_FOUND_ERR | 404 | Contact not found |",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id of contact **(not contactId)**",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the contact",
        "description": "### External API Calls\r\n**PUT** ``` {mainSystemHost}/api/v1/Contact/{id} ```\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_CONTACT_NOT_FOUND_ERR | 404 | Contact not found |",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id of contact **(not contactId)**",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Must have the **Id** of contact  \r\n**Mobile**, **Home**, **Office** must contain a number. **Email** must be an email",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Contacts/Search": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Searches through the contacts",
        "description": "### Remarks\r\nThe contacts from the external source are binded to users by **contactId** in the DB. Which can be accessed by property **contact**\r\n### External API Calls\r\n**GET** ``` {mainSystemHost}/api/v1/Contact/Search ```\r\n### Usage\r\nUse **pageSize** to regulate the size of returned page and **pageNumber** to get specific page of the paginated list\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_CONTACT_SEARCH_ERR | 400 | Error, while searching contacts on external source |",
        "parameters": [
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "#### Optional\r\nFilter for the **DisplayName**",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "#### Optional\r\nFilter for the **Email**",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "#### Optional\r\n#### Number of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "#### Optional\r\n#### Size of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/FileUploader/CreateDir": {
      "post": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/FileUploader/ViewDir": {
      "get": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/FileUploader/ViewDirOS": {
      "get": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/FileUploader/DeleteDir": {
      "delete": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/FileUploader/ShowFileInfo": {
      "get": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/FileUploader/UploadFile": {
      "post": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ContentType": {
                  "style": "form"
                },
                "ContentDisposition": {
                  "style": "form"
                },
                "Headers": {
                  "style": "form"
                },
                "Length": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/FileUploader/DownloadFile": {
      "post": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/FileUploader/DeleteFile": {
      "delete": {
        "tags": [
          "FileUploader"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Notifications/GetAll": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Gets all notifications as paginated list",
        "description": "### Usage\r\nUse **pageSize** to regulate the size of returned page and **pageNumber** to get specific page of the paginated list",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "#### Optional\r\n#### Size of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "#### Optional\r\n#### Number of page",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/Get": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the information of user from the main system",
        "description": "### External API Calls\r\n**GET** ``` {mainSystemHost}/api/v1/User/FindUserById/{userId} ```\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| EXT_GLOBAL_USER_NOT_FOUND_ERR | 404 | User not found in main system |",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Id of user",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lang",
            "in": "header",
            "description": "**en**, **ar**",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/UpdateStatus": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the status of the current user",
        "description": "### Remarks\r\nCan only change status of your own  \r\nCan not change the status of an offline user\r\n### SignalR\r\nAfter calling this method, the ``` /chat/GlobalUserUpdated ``` should be called, see more info in the ``` ChatHub ``` section\r\n### Possible errors\r\n| ErrorCode | Status | Description |\r\n| ----------- | ----------- | ----------- |\r\n| GLOBAL_USER_NOT_FOUND_ERR | 404 | User not found |\r\n| GLOBAL_USER_OFFLINE_ERR   | 400 | User is offline |",
        "parameters": [
          {
            "name": "status",
            "in": "header",
            "description": "Custom status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Error occured. Check remarks for more info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chat/OnConnectedAsync": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when user is connected to the signalR hub\n            ",
        "description": "### Remarks \n Setting the status of global user as **Online** then calling the front-end method to notify all users of changed status \n Adding user to all SignalR chat groups \n ### Methods called on front-end \n ``` updateOnlineStatus(userId:string, status:string) ``` which should update the online status of global user \n ### Possible errors \n | ErrorCode | Status | Description | \n | ----------- | ----------- | ----------- | \n | USER_NOT_FOUND_ERR | 404 | User not found |",
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/OnDisconnectedAsync ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when user is disconnected from the signalR hub\n            ",
        "description": "### Remarks \n  Setting the status of global user as **Offline** then calling the front-end method to notify all users of changed status \n  Removing user from all SignalR chat groups \n  ### Methods called on front-end \n  ``` updateOnlineStatus(userId:string, status:string) ``` which should update the online status of global user \n  ### Possible errors \n  | ErrorCode | Status | Description | \n  | ----------- | ----------- | ----------- | \n  | USER_NOT_FOUND_ERR | 404 | User not found |",
        "parameters": [
          {
            "name": "exception",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Exception"
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/ChatCreated ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when the new chat is created\n            ",
        "description": "### Remarks \n  Adding all users that are not **Offline** to SignalR chat group and calling the method to update all chats from the stored **ConnectionId** in **DB** \n  ### Methods called on front-end \n  ``` updateChats() ``` which should update the list of chats",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/ChatDeleted ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when the chat is deleted\n            ",
        "description": "### Remarks \n Removing all users that are not **Offline** to SignalR chat group and calling the method to update all chats from the stored **ConnectionId** in **DB** \n ### Methods called on front-end \n ``` updateChats() ``` which should update the list of chats \n",
        "parameters": [
          {
            "name": "chat",
            "in": "query",
            "description": "Chat object",
            "schema": {
              "$ref": "#/components/schemas/Chat"
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/ChatUpdated ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when the chat is updated\n            ",
        "description": "### Remarks \n Calling the method to update the specific chat for the whole SignalR chat group \n ### Methods called on front-end \n ``` updateChat(chatId:string) ``` which should update the specific chat \n",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/GlobalUserUpdated": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when the current global user is updated\n            ",
        "description": "### Methods called on front-end \n ``` updateOnlineStatus(userId:string, status:string) ``` which should update the onlne status of specific user \n ### Possible errors \n | ErrorCode | Status | Description | \n | ----------- | ----------- | ----------- | \n | USER_NOT_FOUND_ERR | 404 | User not found | \n",
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/ChatUsersAdded  ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when the chatUsers are added\n            ",
        "description": "### Remarks \n First adds the new users to SignalR chat group  \n Calling the method to update the specific chat for the whole SignalR chat group \n ### Methods called on front-end \n ``` updateChat(chatId:string) ``` which should update the specific chat \n",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatUsersToAdd",
            "in": "query",
            "description": "List of chatUsers",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChatUser"
              }
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/ChatUsersDeleted  ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when the chatUsers are deleted\n            ",
        "description": "### Remarks \n First deletes the deleted users from SignalR chat group  \n Calling the method to update the specific chat for the whole SignalR chat group \n ### Methods called on front-end \n ``` updateChat(chatId:string) ``` which should update the specific chat \n",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chatUsersToDelete",
            "in": "query",
            "description": "List of chatUsers",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChatUser"
              }
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/Sent ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called after message is sent\n            ",
        "description": "### Remarks \n First **LastActivity** is updated  \n Then new notification is added to **DB** and called ``` notify(userId:string, message:Message) ```  \n Then ``` broadcastMessage(chatId:string, userId:string, message:Message) ``` is called  \n Then ``` messageStatus(chatId:string, messageId:string, status:string) ``` is set to **Sent** \n ### Methods called on front-end \n ``` notify(userId:string, message:Message) ``` which should notify the user with push-notification  \n ``` broadcastMessage(chatId:string, userId:string, message:Message) ``` which should broadcast the message to chat  \n ``` messageStatus(chatId:string, messageId:string, status:string) ``` which update the message status  \n ### Possible errors \n | ErrorCode | Status | Description | \n | ----------- | ----------- | ----------- | \n | USER_NOT_FOUND_ERR | 404 | User not found | \n | CHAT_NOT_FOUND_ERR | 404 | Chat not found | \n",
        "parameters": [
          {
            "name": "messageObj",
            "in": "query",
            "description": "Message object",
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/IsTyping  ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called when the user started typing\n            ",
        "description": "### Remarks \n IsTyping is shown is the chat with the user \n  ### Methods called on front-end \n  ``` tempMessage(chatId:string, userId:string, message:string) ``` which should send temp message to chat  \n  ``` clearTempMessage(chatId:string, userId:string) ``` which should clear temp message in chat",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "yes",
            "in": "query",
            "description": "Started typing or ended typing",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    },
    "/chat/Seen  ": {
      "post": {
        "tags": [
          "ChatHub"
        ],
        "summary": "\n            Called after message is seen\n            ",
        "description": "### Remarks \n First **Status** of message is updated in **DB**  \n Then ``` messageStatus(chatId:string, messageId:string, status:string) ``` is set to **Seen** \n  ### Methods called on front-end \n  ``` messageStatus(chatId:string, messageId:string, status:string) ``` which update the message status \n  ### Possible errors \n  | ErrorCode | Status | Description | \n  | ----------- | ----------- | ----------- | \n  | MESSAGE_NOT_FOUND_ERR | 404 | Message not found |",
        "parameters": [
          {
            "name": "chatId",
            "in": "query",
            "description": "Id of chat",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "query",
            "description": "Id of message",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": { },
        "security": [
          {
            "basic": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "nullable": true
          },
          "code": {
            "$ref": "#/components/schemas/RESPONSE_CODE"
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "entryPoint": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "escapedCodeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "manifestModule": {
            "$ref": "#/components/schemas/Module"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "nullable": true,
            "readOnly": true
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "securityRuleSet": {
            "$ref": "#/components/schemas/SecurityRuleSet"
          }
        },
        "additionalProperties": false
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "attachmentId": {
            "type": "integer",
            "format": "int32"
          },
          "messageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filePath": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "$ref": "#/components/schemas/Message"
          }
        },
        "additionalProperties": false
      },
      "CallingConventions": {
        "enum": [
          1,
          2,
          3,
          32,
          64
        ],
        "type": "integer",
        "format": "int32"
      },
      "Chat": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "customName": {
            "type": "boolean"
          },
          "chatUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatUser"
            },
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChatResultDto": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "customName": {
            "type": "boolean"
          },
          "chatUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatUser"
            },
            "nullable": true
          },
          "lastMessage": {
            "$ref": "#/components/schemas/Message"
          }
        },
        "additionalProperties": false
      },
      "ChatUser": {
        "type": "object",
        "properties": {
          "chatUserId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "chatId": {
            "type": "integer",
            "format": "int32"
          },
          "isModerator": {
            "type": "boolean"
          },
          "chat": {
            "$ref": "#/components/schemas/Chat"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "ConstructorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          }
        },
        "additionalProperties": false
      },
      "ContactDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "home": {
            "type": "string",
            "nullable": true
          },
          "office": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "$ref": "#/components/schemas/Type"
          },
          "constructor": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypedArgument"
            },
            "nullable": true,
            "readOnly": true
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeNamedArgument"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "typedValue": {
            "$ref": "#/components/schemas/CustomAttributeTypedArgument"
          },
          "memberName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isField": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventAttributes": {
        "enum": [
          0,
          512,
          1024
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/EventAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "addMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "removeMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "raiseMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "isMulticast": {
            "type": "boolean",
            "readOnly": true
          },
          "eventHandlerType": {
            "$ref": "#/components/schemas/Type"
          }
        },
        "additionalProperties": false
      },
      "Exception": {
        "type": "object",
        "properties": {
          "targetSite": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true,
            "readOnly": true
          },
          "innerException": {
            "$ref": "#/components/schemas/Exception"
          },
          "helpLink": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "hResult": {
            "type": "integer",
            "format": "int32"
          },
          "stackTrace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "FieldAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          4096,
          8192,
          32768,
          38144
        ],
        "type": "integer",
        "format": "int32"
      },
      "FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/FieldAttributes"
          },
          "fieldType": {
            "$ref": "#/components/schemas/Type"
          },
          "isInitOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isLiteral": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotSerialized": {
            "type": "boolean",
            "readOnly": true
          },
          "isPinvokeImpl": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "fieldHandle": {
            "$ref": "#/components/schemas/RuntimeFieldHandle"
          }
        },
        "additionalProperties": false
      },
      "GenericParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          28
        ],
        "type": "integer",
        "format": "int32"
      },
      "ICustomAttributeProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "IntPtr": {
        "type": "object",
        "additionalProperties": false
      },
      "LayoutKind": {
        "enum": [
          0,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "LogInDto": {
        "required": [
          "email",
          "passWord"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "passWord": {
            "minLength": 1,
            "type": "string"
          },
          "ua": {
            "$ref": "#/components/schemas/UserAgent"
          }
        },
        "additionalProperties": false
      },
      "LogInResultDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "$ref": "#/components/schemas/APIResult"
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "genderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "birthdayDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emirateId": {
            "type": "string",
            "nullable": true
          },
          "rolesId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "rolesName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "countryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemberInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MemberTypes": {
        "enum": [
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          191
        ],
        "type": "integer",
        "format": "int32"
      },
      "Message": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer",
            "format": "int32"
          },
          "chatId": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "senderId": {
            "type": "integer",
            "format": "int32"
          },
          "datetime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "chat": {
            "$ref": "#/components/schemas/Chat"
          },
          "sender": {
            "$ref": "#/components/schemas/User"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MethodAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          53248
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodBase": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MethodImplAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          4096,
          65535
        ],
        "type": "integer",
        "format": "int32"
      },
      "MethodInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "returnParameter": {
            "$ref": "#/components/schemas/ParameterInfo"
          },
          "returnType": {
            "$ref": "#/components/schemas/Type"
          },
          "returnTypeCustomAttributes": {
            "$ref": "#/components/schemas/ICustomAttributeProvider"
          }
        },
        "additionalProperties": false
      },
      "Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "scopeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "moduleHandle": {
            "$ref": "#/components/schemas/ModuleHandle"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Notification": {
        "type": "object",
        "properties": {
          "notificationId": {
            "type": "integer",
            "format": "int32"
          },
          "messageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/Message"
          }
        },
        "additionalProperties": false
      },
      "ParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          4096,
          8192,
          16384,
          32768,
          61440
        ],
        "type": "integer",
        "format": "int32"
      },
      "ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/ParameterAttributes"
          },
          "member": {
            "$ref": "#/components/schemas/MemberInfo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parameterType": {
            "$ref": "#/components/schemas/Type"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PropertyAttributes": {
        "enum": [
          0,
          512,
          1024,
          4096,
          8192,
          16384,
          32768,
          62464
        ],
        "type": "integer",
        "format": "int32"
      },
      "PropertyInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "propertyType": {
            "$ref": "#/components/schemas/Type"
          },
          "attributes": {
            "$ref": "#/components/schemas/PropertyAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "getMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          },
          "setMethod": {
            "$ref": "#/components/schemas/MethodInfo"
          }
        },
        "additionalProperties": false
      },
      "RESPONSE_CODE": {
        "enum": [
          200,
          201,
          400,
          404,
          406,
          423,
          444,
          451,
          500,
          501
        ],
        "type": "integer",
        "format": "int32"
      },
      "RoleGetDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "roleName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RuntimeFieldHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "RuntimeTypeHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/IntPtr"
          }
        },
        "additionalProperties": false
      },
      "SecurityRuleSet": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "StructLayoutAttribute": {
        "type": "object",
        "properties": {
          "typeId": {
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "$ref": "#/components/schemas/LayoutKind"
          }
        },
        "additionalProperties": false
      },
      "Type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TypeAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          24,
          32,
          128,
          256,
          1024,
          2048,
          4096,
          8192,
          16384,
          65536,
          131072,
          196608,
          262144,
          264192,
          1048576,
          12582912
        ],
        "type": "integer",
        "format": "int32"
      },
      "TypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredConstructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstructorInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MethodInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredNestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "implementedInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Type"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "lastActivity": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "connectionId": {
            "type": "string",
            "nullable": true
          },
          "realName": {
            "type": "string",
            "nullable": true
          },
          "contactName": {
            "type": "string",
            "nullable": true
          },
          "chatUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatUser"
            },
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserAgent": {
        "type": "object",
        "properties": {
          "browserName": {
            "type": "string",
            "nullable": true
          },
          "browserVersion": {
            "type": "string",
            "nullable": true
          },
          "device": {
            "type": "string",
            "nullable": true
          },
          "os": {
            "type": "string",
            "nullable": true
          },
          "ip": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "birthdayDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "natId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "nationalityName": {
            "type": "string",
            "nullable": true
          },
          "telNo": {
            "type": "string",
            "nullable": true
          },
          "emailLang": {
            "type": "string",
            "nullable": true
          },
          "smsLang": {
            "type": "string",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "profileStatus": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "emiratesId": {
            "type": "string",
            "nullable": true
          },
          "rolesName": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleGetDto"
            },
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "sign": {
            "type": "string",
            "nullable": true
          },
          "emarit": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Token",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "### Controller that is working with global users"
    },
    {
      "name": "Notifications",
      "description": "### Controller that is working with notifications  \r\nAll methods are working with the notifications for the current user only for safety reason"
    },
    {
      "name": "Contacts",
      "description": "### Controller that is working with contacts from the main system  \r\nAll methods are working with the current user's contacts only for safety reason"
    },
    {
      "name": "Chats",
      "description": "### Controller that is working with chats, chatUsers, messages, attachments  \r\nAll methods are working with the chats, messages, attachments for the current user only for safety reason"
    },
    {
      "name": "Authorization",
      "description": "### Controller that is used for authentication and authorization through the main system"
    }
  ]
}